[
  {
    "objectID": "notebooks/high_treason_expert_system.html",
    "href": "notebooks/high_treason_expert_system.html",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "",
    "text": "HIGH_TREASON_RULES = {\n    \"sovereign\": [(\"Did the defendant kill the sovereign?\",\n                   [\"kill\"]),\n                  (\"Did the defendant attempt to kill the sovereign?\",\n                   [\"kill\", \"attempt\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause death?\",\n                   [\"bodily harm\", \"tending to death\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause destruction?\",\n                   [\"bodily harm\", \"tending to destruction\"]),\n                  (\"Did the defendant maim the sovereign?\",\n                   [\"maim\"]),\n                  (\"Did the defendant wound the sovereign?\",\n                   [\"wound\"]),\n                  (\"Did the defendant imprison the sovereign?\",\n                   [\"imprison\"]),\n                  (\"Did the defendant restrain the sovereign?\",\n                   [\"restrain\"])],\n    \"canada\": [(\"Did the defendant levy war against Canada?\",\n                [\"levy war\"]),\n               (\"Did the defendant prepare to levy war against Canada?\",\n                [\"prepare\", \"levy war\"]),\n               (\"Did the defendant assist an enemy at war with Canada?\",\n                [\"assist warring enemy\"]),\n               (\"Did the defendant assist an armed force hostily engaged with Canadian Forces?\",\n                [\"assist hostile force\"])]}"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#facts.py",
    "href": "notebooks/high_treason_expert_system.html#facts.py",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "facts.py",
    "text": "facts.py"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#main.py",
    "href": "notebooks/high_treason_expert_system.html#main.py",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "main.py",
    "text": "main.py\nThis function executes the program. It creates a Facts object by canvassing the minimum number of questions for the offence’s factual matrix. Once created, Facts is passed to the rules set which returns the final result.\nThe function is limited to high treason as defined in Criminal Code s 46, and thus has this rule set coded into tthe function. Future versions should modularize this rule set call.\n\nfrom facts import high_treason_facts\nfrom rules import high_treason_rules\nfrom models import Facts, Complainant\nfrom input_correction import standardize_sovereign_names, standardize_canada_names\n\n\ndef create_facts():\n    \"\"\"\n    Creates a Facts object that can then be read using the rule base.\n    \"\"\"\n\n    print(\"Please enter the facts of the case:\")\n\n    victim_name = input(\"Who is the victim? \")\n    victim_name = standardize_sovereign_names(victim_name)\n    victim_name = standardize_canada_names(victim_name)\n    complainant = Complainant(victim_name)\n\n    offence_date = input(\"Date of the offence (YYYY-MM-DD): \")\n    jurisdiction = input(\"Jurisdiction: \")\n\n    actions = high_treason_facts(victim_name)\n\n    return Facts(complainant.name, offence_date, jurisdiction, actions)\n\nfacts = create_facts()\n\nif high_treason_rules(facts):\n    print(\"High treason committed.\")\nelse:\n    print(\"No offence detected.\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m a staff lawyer with Legal Aid Saskatchewan practicing criminal defence out of Swift Current, Sask. All work and opinions expressed on this site are mine, and not necessarily (or impliedly) my employer’s."
  },
  {
    "objectID": "about.html#daniel-booy",
    "href": "about.html#daniel-booy",
    "title": "About",
    "section": "",
    "text": "I’m a staff lawyer with Legal Aid Saskatchewan practicing criminal defence out of Swift Current, Sask. All work and opinions expressed on this site are mine, and not necessarily (or impliedly) my employer’s."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "TODO",
    "section": "",
    "text": "Items that need attention sooner than later.\n\n\n\nSinclair\nImmigration\nNolo contendere"
  },
  {
    "objectID": "posts/welcome/index.html#articles",
    "href": "posts/welcome/index.html#articles",
    "title": "TODO",
    "section": "",
    "text": "Sinclair\nImmigration\nNolo contendere"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "legal informatics",
    "section": "",
    "text": "A basic statutory expert system\n\n\n\n\n\n\n\narticle\n\n\ncode\n\n\nanalysis\n\n\n\n\nDespite advances in generative AI, expert legal systems will continue to be necessary for legal tech and its applications. These systems can anticipate the hallucinations that generative AIs produce, guide them by prompting them along a control flow, and easily expose the logic underlying a legal AI’s decision. In this post I outline a simple and intuitively-coded expert system that addresses, at a very high level, a narrow, basic legal problem: whether a criminal defendant is guilty of high treason.\n\n\n\n\n\n\nJun 24, 2023\n\n\nDaniel Booy\n\n\n\n\n\n\n  \n\n\n\n\nTODO\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nDaniel Booy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html",
    "href": "posts/basic-statutory-expert-system/index.html",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "",
    "text": "When reading up on legal tech’s intersections with AI and expert systems, researchers and writers frequently mention Robert Kowalski, Fariba Sadri, and Marek Sogot’s paper “The British Nationality Act as a Logic Program”1 as a black swan event in legal AI.2 Their paper outlined an expert legal system the authors designed and coded in Prolog. Reading through their report, it seemed that a Python program could produce similar results. This little project aims to do that, starting with a simple statutory example."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#what-is-high-treason",
    "href": "posts/basic-statutory-expert-system/index.html#what-is-high-treason",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "What is high treason?",
    "text": "What is high treason?\nHigh treason is a criminal offence created by section 46(1) of the Canadian Criminal Code. When I wrote this post, the offence read as follows:\n\nHigh treason\n46 (1) Every one commits high treason who, in Canada,\n\nkills or attempts to kill Her Majesty, or does her any bodily harm tending to death or destruction, maims or wounds her, or imprisons or restrains her;\nlevies war against Canada or does any act preparatory thereto; or\nassists an enemy at war with Canada, or any armed forces against whom Canadian Forces are engaged in hostilities, whether or not a state of war exists between Canada and the country whose forces they are.\n\n\nAlthough treason has been a codified criminal offence since the Criminal Code, 1892, the distinction between treason and high treason is relatively recent. Before Parliament made significant amendments to the Criminal Code in the 1970s, treason and high treason were a single, albeit multi-faceted, codified offence.3 Historically, treason was one of three offences punishable by death,4 and remains one of the most severe offences in Canadian criminal law."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#why-high-treason",
    "href": "posts/basic-statutory-expert-system/index.html#why-high-treason",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "Why high treason?",
    "text": "Why high treason?\nThere are several key advantages to working with an offence like high treason:\n\nMinimal statutory elements. Criminal Code s 46 contains a reasonably straightforward control flow with only a few possible outcomes each time the program asks the user to choose between options.\nFew conditional layers. High treason’s decision tree only contains a few conditional layers. At most, the user must make two decisions before reaching a result and can arrive at a result after as few as one decision. This conditional superficiality makes high treason easy to diagram and demonstrates some basic expert legal system fundamentals.\nUnderlitigated. Although all Canadian criminal offences begin as codified statutes, most accumulate greater complexity through litigation. Courts ask and answer what certain words mean in certain circumstances and often add dozens of conditions to one or more basic elemental steps. High treason is a relatively recently created and infrequently charged offence, with few (if any) reported cases turning up in any of the usual repositories. Infrequently charged offences are, by necessity, rarely judicially considered. This infrequency limits the degree to which the statute can be interpretively bifurcated and grow more complex.\nHighly integrated. Despite not appearing much in reported case decisions, high treason is a serious offence that attracts special consideration throughout the Criminal Code, such as punishment availability, mandatory trial procedures, evidentiary prerequisites, jurisdictional nuances, etc. These conditions require the basic expert system I develop here to remain extensible to these future inputs.\n\nHigh treason’s relative conceptual simplicity makes it an ideal offence to begin development. It is sufficiently complex to allow me to experiment with navigating control points while being straightforward enough to be captured by an automated expert system that answers a simple legal question."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#the-projects-scope",
    "href": "posts/basic-statutory-expert-system/index.html#the-projects-scope",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "The project’s scope",
    "text": "The project’s scope\nThis project’s goal is to encapsulate high treason within an expert legal system fully. The project must account for the punishment, procedural, and jurisdictional components discussed above to be considered complete. But to start, I will represent high treason’s offence section at a high level. Once the basic control flow is outlined and codified, it can be made more extensible and further developed to incorporate these additional components."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#high-treasons-elements",
    "href": "posts/basic-statutory-expert-system/index.html#high-treasons-elements",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "High treason’s elements",
    "text": "High treason’s elements\nCriminal Code s 46(1)’s wording describes the following offence elements:\n\nThe offence took place in Canada; AND\nWhere the complainant is the sovereign, the defendant:\n\n\nKilled the sovereign; OR\nAttempted to kill the sovereign; OR\nCaused the sovereign bodily harm tending to cause i. Death; OR ii. Destruction; OR\nMaims the sovereign; OR\nWounds the sovereign; OR\nImprisons the sovereign; OR\nRestrains the sovereign; OR\n\n\nWhere the complainant is Canada, the defendant:\n\n\nLevied war against Canada; OR\nPrepared to levy war against Canada; OR\nAssists an enemy at war with Canada; OR\nAssists an armed force engaged in hostilities with Canada.\n\nWhere none of these conditions obtain, the defendant did not commit high treason."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#high-treasons-elements-as-a-flowchart",
    "href": "posts/basic-statutory-expert-system/index.html#high-treasons-elements-as-a-flowchart",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "High treason’s elements as a flowchart",
    "text": "High treason’s elements as a flowchart\nThese elements can also be represented as follows:\n\n\n\n\nflowchart TD\n    A[Did the defendant commit high treason?] --&gt; B1{The act took place in Canada}\n    B1 --&gt;|No| B2(Not guilty)\n    B1 --&gt;|Yes| C{Who is the complainant}\n    C --&gt; D[The sovereign]\n    C --&gt; E[Canada]\n    C --&gt; F[\"¬(The sovereign ∨ Canada)\"]\n    F --&gt; G(Not guilty)\n    E --&gt; H0{Did the defendant}\n    H0 --&gt; H1[Levy war against Canada]\n    H1 --&gt;|\"∨\"| H2[Prepare to levy war against Canada]\n    H2 --&gt;|\"∨\"| H3[Assist an enemy at war with Canada]\n    H3 --&gt;|\"∨\"| H4[Assist a hostile armed force engaged with Canada]\n    H4 --&gt;|Yes| I1(Guilty)\n    H4 --&gt;|No| I2(Not guilty)\n    D --&gt; J0{Did the defendant}\n    J0 --&gt; J1[Kill the sovereign]\n    J1 --&gt;|\"∨\"| J2[Attempt to kill the sovereign]\n    J2 --&gt;|\"∨\"| J3[Do bodily harm to the sovereign tending to cause death]\n    J3 --&gt;|\"∨\"| J4[Do bodily harm to the sovereign tending to cause destruction]\n    J4 --&gt;|\"∨\"| J5[Maim the sovereign]\n    J5 --&gt;|\"∨\"| J6[Wound the sovereign]\n    J6 --&gt;|\"∨\"| J7[Imprison the sovereign]\n    J7 --&gt;|\"∨\"| J8[Restrain the sovereign]\n    J8 --&gt;|Yes| K1(Guilty)\n    J8 --&gt;|No| K2(Not guilty)\n\n\n\n\n\nFigure 1: An ugly flowchart describing the basic expert system’s flow control\nViewed this way, it is apparent how this decision tree might be easily adapted into a Python script that can, at a high level with sufficient and reliable information, decide whether a defendant committed high treason."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#facts.py",
    "href": "posts/basic-statutory-expert-system/index.html#facts.py",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "facts.py",
    "text": "facts.py"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#main.py",
    "href": "posts/basic-statutory-expert-system/index.html#main.py",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "main.py",
    "text": "main.py\nThis function executes the program. It creates a Facts object by canvassing the minimum number of questions for the offence’s factual matrix. Once created, Facts is passed to the rules set which returns the final result.\nThe function is limited to high treason as defined in Criminal Code s 46, and thus has this rule set coded into tthe function. Future versions should modularize this rule set call."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#footnotes",
    "href": "posts/basic-statutory-expert-system/index.html#footnotes",
    "title": "[notebook] Criminal Code s 46 expert system example",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee http://www.doc.ic.ac.uk/~rak/papers/British%20Nationality%20Act.pdf↩︎\nSee e.g. AI & Law: British Nationality Act Unexpectedly Spurred AI And Law, How the British Nationality Act Served to Inadvertently Spur AI and the Law.↩︎\nCompare Criminal Code, 1952 s 46(1) with Aidan R. Vining, “Reforming Canadian Sentencing Practices: Problems, Prospects and Lessons” (1979) 17:2 Osgoode Hall L J 355 at note 116.↩︎\nThe other historically capital offences were murder and rape.↩︎\nSee e.g. https://en.wikibooks.org/wiki/Canadian_Criminal_Law/Proof_of_Elements↩︎"
  }
]