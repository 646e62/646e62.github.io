[
  {
    "objectID": "notebooks/high_treason_expert_system.html",
    "href": "notebooks/high_treason_expert_system.html",
    "title": "Criminal Code s 46 expert system example",
    "section": "",
    "text": "This file contains the questions that, once answered, can generate the factual matrix needed to determine whether the defendant committed high treason. The conditional flow is clumsy, but the questions employed that way for now may be useful for GPT-3.5-style prompts at a later point.\n\nHIGH_TREASON_RULES = {\n    \"sovereign\": [(\"Did the defendant kill the sovereign?\",\n                   [\"kill\"]),\n                  (\"Did the defendant attempt to kill the sovereign?\",\n                   [\"kill\", \"attempt\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause death?\",\n                   [\"bodily harm\", \"tending to death\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause destruction?\",\n                   [\"bodily harm\", \"tending to destruction\"]),\n                  (\"Did the defendant maim the sovereign?\",\n                   [\"maim\"]),\n                  (\"Did the defendant wound the sovereign?\",\n                   [\"wound\"]),\n                  (\"Did the defendant imprison the sovereign?\",\n                   [\"imprison\"]),\n                  (\"Did the defendant restrain the sovereign?\",\n                   [\"restrain\"])],\n    \"canada\": [(\"Did the defendant levy war against Canada?\",\n                [\"levy war\"]),\n               (\"Did the defendant prepare to levy war against Canada?\",\n                [\"prepare\", \"levy war\"]),\n               (\"Did the defendant assist an enemy at war with Canada?\",\n                [\"assist warring enemy\"]),\n               (\"Did the defendant assist an armed force hostily engaged with Canadian Forces?\",\n                [\"assist hostile force\"])]}"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#rules_constants.py",
    "href": "notebooks/high_treason_expert_system.html#rules_constants.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "",
    "text": "This file contains the questions that, once answered, can generate the factual matrix needed to determine whether the defendant committed high treason. The conditional flow is clumsy, but the questions employed that way for now may be useful for GPT-3.5-style prompts at a later point.\n\nHIGH_TREASON_RULES = {\n    \"sovereign\": [(\"Did the defendant kill the sovereign?\",\n                   [\"kill\"]),\n                  (\"Did the defendant attempt to kill the sovereign?\",\n                   [\"kill\", \"attempt\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause death?\",\n                   [\"bodily harm\", \"tending to death\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause destruction?\",\n                   [\"bodily harm\", \"tending to destruction\"]),\n                  (\"Did the defendant maim the sovereign?\",\n                   [\"maim\"]),\n                  (\"Did the defendant wound the sovereign?\",\n                   [\"wound\"]),\n                  (\"Did the defendant imprison the sovereign?\",\n                   [\"imprison\"]),\n                  (\"Did the defendant restrain the sovereign?\",\n                   [\"restrain\"])],\n    \"canada\": [(\"Did the defendant levy war against Canada?\",\n                [\"levy war\"]),\n               (\"Did the defendant prepare to levy war against Canada?\",\n                [\"prepare\", \"levy war\"]),\n               (\"Did the defendant assist an enemy at war with Canada?\",\n                [\"assist warring enemy\"]),\n               (\"Did the defendant assist an armed force hostily engaged with Canadian Forces?\",\n                [\"assist hostile force\"])]}"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#facts.py",
    "href": "notebooks/high_treason_expert_system.html#facts.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "facts.py",
    "text": "facts.py\n'''\nGenerates a factual matrix that can be used to determine whether the facts of\nthe case make out a particular offence.\n'''\nAt first glance there may be some advantage to having the get_actions() functions return True/False, rather than a list. After all, if any one condition is met, the defendant committed high treason. But this overlooks the fact that a defendant may have committed the same offence through different means. A person who levies war against Canada AND assists a separate armed force hostily engaged with Canadian Forces commits high treason twice. Similarly, a person may have caused the sovereign bodily harm that amounts to both maiming and bodily harm tending to cause death, and can be fairly charged and tried for both offences (albeit not convicted of both, per Stinchcombe.) A list allows the program to record multiple offence instances using fewer passes. Lists save time and ensure the program remains extensible.\n\ndef get_sovereign_actions() -&gt; list:\n    \"\"\"\n    Ask the user questions related to actions against the sovereign.\n    \"\"\"\n\n    actions = []\n    for question in HIGH_TREASON_RULES[\"sovereign\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"sovereign\", question[1]))\n    \n    return actions\n\n\ndef get_canada_actions() -&gt; list:\n    \"\"\"\n    Ask the user questions related to actions against Canada.\n    \"\"\"\n\n    actions = []\n    for question in HIGH_TREASON_RULES[\"canada\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"canada\", question[1]))\n\n    return actions\n\ndef high_treason_facts(victim_category) -&gt; list:\n    \"\"\"\n    Asks the user questions to determine if the facts of the case make out the offence of high treason.\n    \"\"\"\n    actions = []\n\n    if victim_category.lower() == 'sovereign':\n        actions = get_sovereign_actions()\n    elif victim_category.lower() == 'canada':\n        actions = get_canada_actions()\n\n    return actions"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#models.py",
    "href": "notebooks/high_treason_expert_system.html#models.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "models.py",
    "text": "models.py\nOnce the program gathers this information, it needs a place to store it. The Facts class takes this job on. The version below contemplates a few variables that aren’t in use yet. Because this class is currently being used for just one offence, it only needs to be able to store the victim category and the defendant’s actions.\n\nclass Facts:\n    \"\"\"\n    A basic class capable of handling the minimum facts required for a high \n    treason offence.\n\n    Attributes:\n        victim_category (str): The name of the victim of the offence.\n        offence_date (str): The date of the offence.\n        jurisdiction (str): The jurisdiction in which the offence took place.\n        actions (list): A list of actions that the defendant took against the \n            victim.\n        role (list): A list of roles that the defendant played in the offence.\n\n    A Facts object should account for one offence and offender. Any potential\n    path to a conviction should be represented by a distinct Facts object. \n    Multiple offences or offenders should be represented by multiple Facts \n    objects.\n    \"\"\"\n\n    def __init__(self, \n                 victim_category: str, \n                 offence_date: str, \n                 jurisdiction: str, \n                 actions: list = None, \n                 role: list = None\n                ):\n        self.victim_category = victim_category\n        self.offence_date = offence_date\n        self.jurisdiction = jurisdiction\n        self.actions = actions if actions is not None else []\n        self.role = role if role is not None else []"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#rules.py",
    "href": "notebooks/high_treason_expert_system.html#rules.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "rules.py",
    "text": "rules.py\nOnce the factual matrix is put together, the program calls a rules function on those facts. This function first checks to see if the complainant_key matches either of the complainant categories in HIGH_TREASON_RULES. If so, the program checks to see if any of the facts attached to that key match the offence facts in HIGH_TREASON_RULES. If so, the function appends them to a list and returns it. If not, the function returns an empty list for the main function to interpret as a null result.\n\n'''\nRules determining whether a factual matrix corresponds to offence elements.\n'''\n\ndef high_treason_rules(facts):\n    \"\"\"\n    Checks if the facts of the case make out the offence of high treason.\n    \"\"\"\n    matches = []  # create an empty list to hold matches\n\n    # Check if any of the actions in the facts are in the list of high treason actions\n    for action in facts.actions:\n        complainant_key = action[0] \n        action_value = action[1]\n\n        if complainant_key in HIGH_TREASON_RULES: # Checks to see if the complainant category lines up with one of the two in HIGH_TREASON RULES\n            tuple_list = HIGH_TREASON_RULES[complainant_key]\n            for item in tuple_list:\n                if action_value == item[1]:\n                    matches.append(item)  # append the matching item to the list\n    return matches  # return the list of matches"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#dev_models.py",
    "href": "notebooks/high_treason_expert_system.html#dev_models.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "dev_models.py",
    "text": "dev_models.py\nThese models weren’t used to develop the first few versions of the high treason system, but models like this will be needed to extend the system to other offences. It may be needed to extend the high treason system to account for elements like jurisdiction, punishment, procedure, etc.\n\nclass Complainant:\n    \"\"\"\n    Creates a complainant instance. \n    \"\"\"\n    def __init__(self, name=None, age=None, category=None):\n        self.name = name\n        self.age = age\n        self.category = category\n\nclass Defendant:\n    \"\"\"\n    Creates a defendant instance. Necessary to the extent that some offences \n    only apply to defendants with certain characteristics, and to the extent\n    that some offences will involve multiple defendants who need to be kept\n    distinct from one another.\n    \"\"\"\n    def __init__(self, name=None, age=None, liability=None, criminal_record=None):\n        self.name = name\n        self.age = age\n        self.liability = liability\n        self.criminal_record = criminal_record"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#input_correction.py",
    "href": "notebooks/high_treason_expert_system.html#input_correction.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "input_correction.py",
    "text": "input_correction.py\n\n\"\"\"\nFunctions used to process input strings and correct them to a standard format.\n\"\"\"\n\n# High treason\n\ndef standardize_sovereign_names(name):\n    \"\"\"\n    This function takes a name and standardizes it to 'Sovereign' if it matches any of the known aliases.\n    \"\"\"\n    known_aliases = ('queen', 'king', 'queen elizabeth', 'king charles')\n    if name.lower() in known_aliases:\n        return 'sovereign'\n    else:\n        return name\n\ndef standardize_canada_names(name):\n    \"\"\"\n    This function takes a name and standardizes it to 'Canada' if it matches any of the known aliases.\n    \"\"\"\n    known_aliases = ('nation of canada', 'canadian people', 'canadian military')\n    if name.lower() in known_aliases:\n        return 'canada'\n    else:\n        return name\n\n# Treason\n\ndef treason_location_type(input_string: str) -&gt; str:\n    \"\"\"\n    This function helps determine whether a string entity is a province or a \n    federally-regulated territory for the purpose of determining whether a \n    defendant has committed treason.\n    \"\"\"\n    input_string = input_string.replace('.', '')  # Remove periods from input\n\n    # Dictionary mapping province names, abbreviations and territory names, abbreviations to their corresponding types\n    locations = {\n        \"alberta\": \"province\",\n        \"ab\": \"province\",\n        \"alta\": \"province\",\n        \"british columbia\": \"province\",\n        \"bc\": \"province\",\n        \"manitoba\": \"province\",\n        \"mb\": \"province\",\n        \"man\": \"province\",\n        \"new brunswick\": \"province\",\n        \"nb\": \"province\",\n        \"newfoundland and labrador\": \"province\",\n        \"nl\": \"province\",\n        \"nova scotia\": \"province\",\n        \"ns\": \"province\",\n        \"ontario\": \"province\",\n        \"on\": \"province\",\n        \"ont\": \"province\",\n        \"prince edward island\": \"province\",\n        \"pei\": \"province\",\n        \"quebec\": \"province\",\n        \"qc\": \"province\",\n        \"que\": \"province\",\n        \"saskatchewan\": \"province\",\n        \"sk\": \"province\",\n        \"sask\": \"province\",\n        \"northwest territories\": \"canada\",\n        \"nt\": \"canada\",\n        \"nwt\": \"canada\",\n        \"nunavut\": \"canada\",\n        \"nu\": \"canada\",\n        \"nvt\": \"canada\",\n        \"yukon\": \"canada\",\n        \"yt\": \"canada\"\n    }\n\n    # Return the corresponding value if the input string is in the dictionary, else return \"Unknown\"\n    return locations.get(input_string.lower(), \"Unknown\")"
  },
  {
    "objectID": "notebooks/high_treason_expert_system.html#main.py",
    "href": "notebooks/high_treason_expert_system.html#main.py",
    "title": "Criminal Code s 46 expert system example",
    "section": "main.py",
    "text": "main.py\nThis function executes the program. It creates a Facts object by canvassing the minimum number of questions for the offence’s factual matrix. Once created, Facts is passed to the rules set which returns the final result.\nThe function is limited to high treason as defined in Criminal Code s 46, and thus has this rule set coded into tthe function. Future versions should modularize this rule set call.\n\ndef create_facts():\n    \"\"\"\n    Creates a Facts object that can then be read using the rule base.\n    \"\"\"\n\n    print(\"Please enter the facts of the case:\")\n\n    victim_category = input(\"Who is the victim? \")\n    victim_category = standardize_sovereign_names(victim_category)\n    victim_category = standardize_canada_names(victim_category)\n    complainant = Complainant(victim_category)\n\n    offence_date = input(\"Date of the offence (YYYY-MM-DD): \")\n    jurisdiction = input(\"Jurisdiction: \")\n\n    actions = high_treason_facts(victim_category)\n\n    return Facts(complainant.name, offence_date, jurisdiction, actions)\n\ndef verify_high_treason(matches):\n    if matches:\n        print(\"High treason committed. Matches:\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"No offence detected.\")\n\ndef high_treason_system():\n\n    facts = create_facts()\n    matches = high_treason_rules(facts)\n    \n    verify_high_treason(matches)\n    \n    return matches\n\n\nmatches = high_treason_system()\n\nPlease enter the facts of the case:\nHigh treason committed. Matches:\n('Did the defendant kill the sovereign?', ['kill'])\n('Did the defendant do bodily harm to the sovereign tending to cause death?', ['bodily harm', 'tending to death'])\n\n\nWho is the victim?  queen\nDate of the offence (YYYY-MM-DD):  1992\nJurisdiction:  canada\nDid the defendant kill the sovereign? (yes/no):  yes\nDid the defendant attempt to kill the sovereign? (yes/no):  no\nDid the defendant do bodily harm to the sovereign tending to cause death? (yes/no):  yes\nDid the defendant do bodily harm to the sovereign tending to cause destruction? (yes/no):  no\nDid the defendant maim the sovereign? (yes/no):  no\nDid the defendant wound the sovereign? (yes/no):  no\nDid the defendant imprison the sovereign? (yes/no):  no\nDid the defendant restrain the sovereign? (yes/no):  no\n\n\n\nif matches:\n    print(\"High treason committed. Matches:\")\n    for match in matches:\n        print(match)\nelse:\n    print(\"No offence detected.\")\n\nHigh treason committed. Matches:\n('Did the defendant kill the sovereign?', ['kill'])\n('Did the defendant do bodily harm to the sovereign tending to cause death?', ['bodily harm', 'tending to death'])"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m a staff lawyer with Legal Aid Saskatchewan practicing criminal defence out of Swift Current, Sask. All work and opinions expressed on this site are mine, and not necessarily (or impliedly) my employer’s."
  },
  {
    "objectID": "about.html#daniel-booy",
    "href": "about.html#daniel-booy",
    "title": "About",
    "section": "",
    "text": "I’m a staff lawyer with Legal Aid Saskatchewan practicing criminal defence out of Swift Current, Sask. All work and opinions expressed on this site are mine, and not necessarily (or impliedly) my employer’s."
  },
  {
    "objectID": "about.html#informatics.legal",
    "href": "about.html#informatics.legal",
    "title": "About",
    "section": "informatics.legal",
    "text": "informatics.legal\nI’ve built this website using Quarto on top of a GitHub Pages repo. Most code is done in and available as a Jupyter notebook, though I periodically use nvim and VS Code for their Copilot integrations.\nBlog posts may be periodically updated. As a GitHub Pages site, all previous blog post versions will be in the public repo attached to this website."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "TODO",
    "section": "",
    "text": "Items that need attention sooner than later.\n\n\n\nSinclair\nImmigration\nNolo contendere"
  },
  {
    "objectID": "posts/welcome/index.html#articles",
    "href": "posts/welcome/index.html#articles",
    "title": "TODO",
    "section": "",
    "text": "Sinclair\nImmigration\nNolo contendere"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "legal informatics",
    "section": "",
    "text": "A basic statutory expert system\n\n\n\n\n\n\n\narticle\n\n\ncode\n\n\nanalysis\n\n\n\n\nDespite advances in generative AI, expert legal systems will continue to be necessary for legal tech and its applications. These systems can anticipate the hallucinations that generative AIs produce, guide them by prompting them along a control flow, and easily expose the logic underlying a legal AI’s decision. In this post I outline a simple and intuitively-coded expert system that addresses, at a very high level, a narrow, basic legal problem: whether a criminal defendant is guilty of high treason.\n\n\n\n\n\n\nJun 24, 2023\n\n\nDaniel Booy\n\n\n\n\n\n\n  \n\n\n\n\nTODO\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nDaniel Booy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html",
    "href": "posts/basic-statutory-expert-system/index.html",
    "title": "A basic statutory expert system",
    "section": "",
    "text": "When reading up on legal tech’s intersections with AI and expert systems, researchers and writers frequently mention Robert Kowalski, Fariba Sadri, and Marek Sogot’s paper “The British Nationality Act as a Logic Program”1 as a black swan event in legal AI.2 Their paper outlined an expert legal system the authors designed and coded in Prolog. Reading through their report, it seemed that a Python program could produce similar results. This little project aims to do that, starting with a simple statutory example."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#what-is-high-treason",
    "href": "posts/basic-statutory-expert-system/index.html#what-is-high-treason",
    "title": "A basic statutory expert system",
    "section": "What is high treason?",
    "text": "What is high treason?\nHigh treason is a criminal offence created by section 46(1) of the Canadian Criminal Code. When I wrote this post, the offence read as follows:\n\nHigh treason\n46 (1) Every one commits high treason who, in Canada,\n\nkills or attempts to kill Her Majesty, or does her any bodily harm tending to death or destruction, maims or wounds her, or imprisons or restrains her;\nlevies war against Canada or does any act preparatory thereto; or\nassists an enemy at war with Canada, or any armed forces against whom Canadian Forces are engaged in hostilities, whether or not a state of war exists between Canada and the country whose forces they are.\n\n\nAlthough treason has been a codified criminal offence since the Criminal Code, 1892, the distinction between treason and high treason is relatively recent. Before Parliament made significant amendments to the Criminal Code in the 1970s, treason and high treason were a single, albeit multi-faceted, codified offence.3 Historically, treason was one of three offences punishable by death,4 and remains one of the most severe offences in Canadian criminal law."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#why-high-treason",
    "href": "posts/basic-statutory-expert-system/index.html#why-high-treason",
    "title": "A basic statutory expert system",
    "section": "Why high treason?",
    "text": "Why high treason?\nThere are several key advantages to working with an offence like high treason:\n\nMinimal statutory elements. Criminal Code s 46 contains a reasonably straightforward control flow with only a few possible outcomes each time the program asks the user to choose between options.\nFew conditional layers. High treason’s decision tree only contains a few conditional layers. At most, the user must make two decisions before reaching a result and can arrive at a result after as few as one decision. This conditional superficiality makes high treason easy to diagram and demonstrates some basic expert legal system fundamentals.\nUnderlitigated. Although all Canadian criminal offences begin as codified statutes, most accumulate greater complexity through litigation. Courts ask and answer what certain words mean in certain circumstances and often add dozens of conditions to one or more basic elemental steps. High treason is a relatively recently created and infrequently charged offence, with few (if any) reported cases turning up in any of the usual repositories. Infrequently charged offences are, by necessity, rarely judicially considered. This infrequency limits the degree to which the statute can be interpretively bifurcated and grow more complex.\nHighly integrated. Despite not appearing much in reported case decisions, high treason is a serious offence that attracts special consideration throughout the Criminal Code, such as punishment availability, mandatory trial procedures, evidentiary prerequisites, jurisdictional nuances, etc. These conditions require the basic expert system I develop here to remain extensible to these future inputs.\n\nHigh treason’s relative conceptual simplicity makes it an ideal offence to begin development. It is sufficiently complex to allow me to experiment with navigating control points while being straightforward enough to be captured by an automated expert system that answers a simple legal question."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#the-projects-scope",
    "href": "posts/basic-statutory-expert-system/index.html#the-projects-scope",
    "title": "A basic statutory expert system",
    "section": "The project’s scope",
    "text": "The project’s scope\nThis project’s goal is to encapsulate high treason within an expert legal system fully. The project must account for the punishment, procedural, and jurisdictional components discussed above to be considered complete. But to start, I will represent high treason’s offence section at a high level. Once the basic control flow is outlined and codified, it can be made more extensible and further developed to incorporate these additional components."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#high-treasons-elements",
    "href": "posts/basic-statutory-expert-system/index.html#high-treasons-elements",
    "title": "A basic statutory expert system",
    "section": "High treason’s elements",
    "text": "High treason’s elements\nCriminal Code s 46(1)’s wording describes the following offence elements:\n\nThe offence took place in Canada; AND\nWhere the complainant is the sovereign, the defendant:\nKilled the sovereign; OR\nAttempted to kill the sovereign; OR\nCaused the sovereign bodily harm tending to cause death; OR\nCaused the sovereign bodily harm tending to cause destruction; OR\nMaims the sovereign; OR\nWounds the sovereign; OR\nImprisons the sovereign; OR\nRestrains the sovereign; OR\nWhere the complainant is in Canada, the defendant:\nLevied war against Canada; OR\nPrepared to levy war against Canada; OR\nAssists an enemy at war with Canada; OR\nAssists an armed force engaged in hostilities with Canada.\n\nWhere none of these conditions obtain, the defendant did not commit high treason."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#high-treasons-elements-as-a-flowchart",
    "href": "posts/basic-statutory-expert-system/index.html#high-treasons-elements-as-a-flowchart",
    "title": "A basic statutory expert system",
    "section": "High treason’s elements as a flowchart",
    "text": "High treason’s elements as a flowchart\nThese elements can also be represented in a decision tree as follows:\n\n\n\n\nflowchart TD\n    A[Did the defendant commit high treason?] --&gt; B1{The act took place in Canada}\n    B1 --&gt;|No| B2(Not guilty)\n    B1 --&gt;|Yes| C{Who is the complainant}\n    C --&gt; D[The sovereign]\n    C --&gt; E[Canada]\n    C --&gt; F[\"¬(The sovereign ∨ Canada)\"]\n    F --&gt; G(Not guilty)\n    E --&gt; H0{Did the defendant}\n    H0 --&gt; H1[Levy war against Canada]\n    H1 --&gt;|\"∨\"| H2[Prepare to levy war against Canada]\n    H2 --&gt;|\"∨\"| H3[Assist an enemy at war with Canada]\n    H3 --&gt;|\"∨\"| H4[Assist a hostile armed force engaged with Canada]\n    H4 --&gt;|Yes| I1(Guilty)\n    H4 --&gt;|No| I2(Not guilty)\n    D --&gt; J0{Did the defendant}\n    J0 --&gt; J1[Kill the sovereign]\n    J1 --&gt;|\"∨\"| J2[Attempt to kill the sovereign]\n    J2 --&gt;|\"∨\"| J3[Do bodily harm to the sovereign tending to cause death]\n    J3 --&gt;|\"∨\"| J4[Do bodily harm to the sovereign tending to cause destruction]\n    J4 --&gt;|\"∨\"| J5[Maim the sovereign]\n    J5 --&gt;|\"∨\"| J6[Wound the sovereign]\n    J6 --&gt;|\"∨\"| J7[Imprison the sovereign]\n    J7 --&gt;|\"∨\"| J8[Restrain the sovereign]\n    J8 --&gt;|Yes| K1(Guilty)\n    J8 --&gt;|No| K2(Not guilty)\n\n\n\n\n\nFigure 1: An ugly flowchart describing the basic expert system’s flow control\nViewed this way, it is apparent how this decision tree might be easily adapted into a Python script that can, at a high level with sufficient and reliable information, decide whether a defendant committed high treason."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#rules_constants.py",
    "href": "posts/basic-statutory-expert-system/index.html#rules_constants.py",
    "title": "A basic statutory expert system",
    "section": "rules_constants.py",
    "text": "rules_constants.py\nCriminal offences occur when specific factual scenarios take place. This set of rules gives the user a rudimentary way of telling the program what facts exist, allowing it to record these facts when pertinent and return an opinion based on its analysis.\nCurrently, the program accomplishes this by first determining whether the victim falls into one of two classes covered by high treason. If so, the program asks several specific questions to determine whether there are enough additional facts to constitute the offence. If so, it records and returns the result. But if the complainant is not a member of the high treason complainant class or the defendant’s actions do not match the actus reus of any high treason variant, the function advises as much.\nI will outline this functionality below, but for now, the HIGH_TREASON_RULES constant contains all the information needed to get a minimally-viable high treason system going. It currently includes the complainant class as its key and a list of tuples as the key’s value. The tuples have a string at index 0 that prompts the user for a yes/no question and a list at index 1 containing factual information for a future function to read and relay.\n\nHIGH_TREASON_RULES = {\n    \"sovereign\": [(\"Did the defendant kill the sovereign?\",\n                   [\"kill\"]),\n                  (\"Did the defendant attempt to kill the sovereign?\",\n                   [\"kill\", \"attempt\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause death?\",\n                   [\"bodily harm,\" \"tending to death\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause destruction?\",\n                   [\"bodily harm,\" \"tending to destruction\"]),\n                  (\"Did the defendant maim the sovereign?\",\n                   [\"maim\"]),\n                  (\"Did the defendant wound the sovereign?\",\n                   [\"wound\"]),\n                  (\"Did the defendant imprison the sovereign?\",\n                   [\"imprison\"]),\n                  (\"Did the defendant restrain the sovereign?\",\n                   [\"restrain\"])],\n    \"canada\": [(\"Did the defendant levy war against Canada?\",\n                [\"levy war\"]),\n               (\"Did the defendant prepare to levy war against Canada?\",\n                [\"prepare\", \"levy war\"]),\n               (\"Did the defendant assist an enemy at war with Canada?\",\n                [\"assist warring enemy\"]),\n               (\"Did the defendant assist an armed force hostily engaged with Canadian Forces?\",\n                [\"assist hostile force\"])]}"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#facts.py",
    "href": "posts/basic-statutory-expert-system/index.html#facts.py",
    "title": "A basic statutory expert system",
    "section": "facts.py",
    "text": "facts.py\nThis function generates a factual matrix that future processes will use to determine whether the case facts make out a particular offence.\nAt first, having the get_actions() functions return True/False rather than a list seems best. After all, if any one condition obtains, the defendant committed high treason. But this overlooks that a defendant may have committed the same offence through different means. A person who levies war against Canada AND assists a separate armed force hostile engaged with Canadian Forces commits high treason twice. Similarly, a person may have caused the sovereign bodily harm that amounts to both maiming and bodily harm tending to cause death and can be legally charged and tried for both offences (albeit not convicted of both, per Stinchcombe.) A list allows the program to record multiple offence instances using fewer passes. Lists save time and ensure the program remains extensible.\n\ndef get_sovereign_actions():\n    actions = []\n    for question in HIGH_TREASON_RULES[\"sovereign\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"sovereign\", question[1]))\n    return actions\n\ndef get_canada_actions():\n    actions = []\n    for question in HIGH_TREASON_RULES[\"Canada\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"Canada\", question[1]))\n    return actions\n\ndef high_treason_facts(victim_name):\n    actions = []\n\n    if victim_name.lower() == 'sovereign':\n        actions = get_sovereign_actions()\n    elif victim_name.lower() == 'canada':\n        actions = get_canada_actions()\n    return actions"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#models.py",
    "href": "posts/basic-statutory-expert-system/index.html#models.py",
    "title": "A basic statutory expert system",
    "section": "models.py",
    "text": "models.py\nOnce the program gathers this information, it needs a place to store it. The Facts class takes this job on. The version below contemplates a few variables that still need to be used. Because the program currently uses this class for just one offence, it only needs to be able to store the victim category and the defendant’s actions.\nThe Facts class is a simple class capable of handling the minimum facts required for a high treason offence. It currently contains the following attributes:\n\nvictim_category (str): The name of the victim of the offence.\noffence_date (str): The date of the offence.\njurisdiction (str): The jurisdiction where the offence occurred.\nactions (list): A list of actions that the defendant took against the victim.\nrole (list): A list of roles that the defendant played in the offence.\n\nA Facts object should account for one offence and offender. A distinct Facts object should represent any potential path to a conviction. Multiple Facts objects should represent multiple offences or offenders.\n\nclass Facts:\n    def __init__(self, \n                 victim_category: str, \n                 offence_date: str, \n                 jurisdiction: str, \n                 actions: list = None, \n                 role: list = None\n                ):\n        self.victim_category = victim_category\n        self.offence_date = offence_date\n        self.jurisdiction = jurisdiction\n        self.actions = actions if actions is not None else []\n        self.role = role if role is not None else []"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#rules.py",
    "href": "posts/basic-statutory-expert-system/index.html#rules.py",
    "title": "A basic statutory expert system",
    "section": "rules.py",
    "text": "rules.py\nOnce the factual matrix is put together, the program calls a rules function on those facts. This function first checks to see if the complainant_key matches either of the complainant categories in HIGH_TREASON_RULES. If so, the program checks to see if any of the facts attached to that key match the offence facts in HIGH_TREASON_RULES. If so, the function appends them to a list and returns it. If not, the function returns an empty list for the main function to interpret as a null result.\n\ndef high_treason_rules(facts):\n    matches = []  # create an empty list to hold matches\n    for action in facts.actions:\n        complainant_key = action[0] \n        action_value = action[1]\n\n        if complainant_key in HIGH_TREASON_RULES:\n            tuple_list = HIGH_TREASON_RULES[complainant_key]\n            for item in tuple_list:\n                if action_value == item[1]:\n                    matches.append(item)  # append the matching item to the list\n    return matches  # return the list of matches"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#input_correction.py",
    "href": "posts/basic-statutory-expert-system/index.html#input_correction.py",
    "title": "A basic statutory expert system",
    "section": "input_correction.py",
    "text": "input_correction.py\nThese assumptions assume imperfect input for the victim category and try to anticipate some synonymous terms.\n\ndef standardize_sovereign_names(name):\n    known_aliases = ('queen', 'king', 'queen elizabeth', 'king charles')\n    if name.lower() in known_aliases:\n        return 'sovereign'\n    else:\n        return name\n\ndef standardize_canada_names(name):\n    known_aliases = ('nation of canada', 'canadian people', 'canadian military')\n    if name.lower() in known_aliases:\n        return 'canada'\n    else:\n        return name"
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#main.py",
    "href": "posts/basic-statutory-expert-system/index.html#main.py",
    "title": "A basic statutory expert system",
    "section": "main.py",
    "text": "main.py\nThe program’s main function. It creates a Facts object and checks the factual matrix against the high treason rules system.\n\ndef create_facts():\n    print(\"Please enter the facts of the case:\")\n\n    victim_category = input(\"Who is the victim? \")\n    victim_category = standardize_sovereign_names(victim_category)\n    victim_category = standardize_canada_names(victim_category)\n    complainant = Complainant(victim_category)\n\n    offence_date = input(\"Date of the offence (YYYY-MM-DD): \")\n    jurisdiction = input(\"Jurisdiction: \")\n\n    actions = high_treason_facts(victim_category)\n\n    return Facts(complainant.name, offence_date, jurisdiction, actions)\n\ndef verify_high_treason(matches):\n    if matches:\n        print(\"High treason committed. Matches:\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"No offence detected.\")\n\ndef high_treason_system():\n\n    facts = create_facts()\n    matches = high_treason_rules(facts)\n    \n    verify_high_treason(matches)\n    \n    return matches\n\nAnd that’s it! We have the beginnings of a primitive expert legal system. I will continue developing this code in subsequent blog posts, though I may occasionally return here to update the code. Refer to the GitHub repo for version history, as needed."
  },
  {
    "objectID": "posts/basic-statutory-expert-system/index.html#footnotes",
    "href": "posts/basic-statutory-expert-system/index.html#footnotes",
    "title": "A basic statutory expert system",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee http://www.doc.ic.ac.uk/~rak/papers/British%20Nationality%20Act.pdf↩︎\nSee e.g. AI & Law: British Nationality Act Unexpectedly Spurred AI And Law, How the British Nationality Act Served to Inadvertently Spur AI and the Law.↩︎\nCompare Criminal Code, 1952 s 46(1) with Aidan R. Vining, “Reforming Canadian Sentencing Practices: Problems, Prospects and Lessons” (1979) 17:2 Osgoode Hall L J 355 at note 116.↩︎\nThe other historically capital offences were murder and rape.↩︎\nSee e.g. https://en.wikibooks.org/wiki/Canadian_Criminal_Law/Proof_of_Elements↩︎"
  }
]