{
  "hash": "154a952edfde5acc48dc71b2b704de49",
  "result": {
    "markdown": "---\ntitle: \"A basic statutory expert system\"\nauthor: \"Daniel Booy\"\ndate: \"2023-06-24\"\ncategories: [article, code, analysis]\nimage: \"ai.png\"\nabstract: \"Despite advances in generative AI, expert legal systems will continue to be necessary for legal tech and its applications. These systems can anticipate the hallucinations that generative AIs produce, guide them by prompting them along a control flow, and easily expose the logic underlying a legal AI's decision. In this post I outline a simple and intuitively-coded expert system that addresses, at a very high level, a narrow, basic legal problem: whether a criminal defendant is guilty of high treason.\"\n---\n\n# Introduction\n\nWhen reading up on legal tech's intersections with AI and expert systems, researchers and writers frequently mention Robert Kowalski, Fariba Sadri, and Marek Sogot's paper \"The British Nationality Act as a Logic Program\"[^bna_paper] as a black swan event in legal AI.[^bna_paper_reaction] Their paper outlined an expert legal system the authors designed and coded in Prolog. Reading through their report, it seemed that a Python program could produce similar results. This little project aims to do that, starting with a simple statutory example.\n\n# High treason\n\n## What is high treason?\n\nHigh treason is a criminal offence created by section 46(1) of the Canadian _Criminal Code_. When I wrote this post, the offence read as follows:\n\n> **High treason**\n>\n> **46 (1)** Every one commits high treason who, in Canada,\n>\n> (a) kills or attempts to kill Her Majesty, or does her any bodily harm tending to death or destruction, maims or wounds her, or imprisons or restrains her;\n>\n> (b) levies war against Canada or does any act preparatory thereto; or\n>\n> (c) assists an enemy at war with Canada, or any armed forces against whom Canadian Forces are engaged in hostilities, whether or not a state of war exists between Canada and the country whose forces they are.\n\nAlthough treason has been a codified criminal offence since the _Criminal Code, 1892_, the distinction between _treason_ and _high treason_ is relatively recent. Before Parliament made significant amendments to the _Criminal Code_ in the 1970s, treason and high treason were a single, albeit multi-faceted, codified offence.[^treason_high_treason_comparisons] Historically, treason was one of three offences punishable by death,[^other_capital_offences] and remains one of the most severe offences in Canadian criminal law.\n\n## Why high treason?\n\nThere are several key advantages to working with an offence like high treason:\n\n* **Minimal statutory elements.** _Criminal Code_ s 46 contains a reasonably straightforward control flow with only a few possible outcomes each time the program asks the user to choose between options. \n* **Few conditional layers.** High treason's decision tree only contains a few conditional layers. At most, the user must make two decisions before reaching a result and can arrive at a result after as few as one decision. This conditional superficiality makes high treason easy to diagram and demonstrates some basic expert legal system fundamentals.\n* **Underlitigated.** Although all Canadian criminal offences begin as codified statutes, most accumulate greater complexity through litigation. Courts ask and answer what certain words mean in certain circumstances and often add dozens of conditions to one or more basic elemental steps. High treason is a relatively recently created and infrequently charged offence, with few (if any) reported cases turning up in any of the usual repositories. Infrequently charged offences are, by necessity, rarely judicially considered. This infrequency limits the degree to which the statute can be interpretively bifurcated and grow more complex.\n* **Highly integrated.** Despite not appearing much in reported case decisions, high treason is a serious offence that attracts special consideration throughout the _Criminal Code_, such as punishment availability, mandatory trial procedures, evidentiary prerequisites, jurisdictional nuances, etc. These conditions require the basic expert system I develop here to remain extensible to these future inputs.\n\nHigh treason's relative conceptual simplicity makes it an ideal offence to begin development. It is sufficiently complex to allow me to experiment with navigating control points while being straightforward enough to be captured by an automated expert system that answers a simple legal question. \n\n## The project's scope\n\nThis project's goal is to encapsulate high treason within an expert legal system fully. The project must account for the punishment, procedural, and jurisdictional components discussed above to be considered complete. But to start, I will represent high treason's offence section at a high level. Once the basic control flow is outlined and codified, it can be made more extensible and further developed to incorporate these additional components.\n\n# Elementary control flow\n\nOne way of describing this high-level view is as an \"elementary control flow\" representation. By \"elementary,\" I mean it represents the offence's essential elements.[^offence_elements] By \"control flow,\" I refer to the decision trees commonly used in computer science and juridical reasoning.\n\n## High treason's elements\n\n_Criminal Code_ s 46(1)'s wording describes the following offence elements:\n\n1. The offence took place in Canada; AND\n2. Where the complainant is the sovereign, the defendant:\n  1. Killed the sovereign; OR\n  2. Attempted to kill the sovereign; OR\n  3. Caused the sovereign bodily harm tending to cause death; OR\n  4. Caused the sovereign bodily harm tending to cause destruction; OR\n  5. Maims the sovereign; OR\n  6. Wounds the sovereign; OR\n  7. Imprisons the sovereign; OR\n  8. Restrains the sovereign; OR\n3. Where the complainant is in Canada, the defendant:\n  1. Levied war against Canada; OR\n  2. Prepared to levy war against Canada; OR\n  3. Assists an enemy at war with Canada; OR\n  4. Assists an armed force engaged in hostilities with Canada.\n\nWhere none of these conditions obtain, the defendant did not commit high treason.\n\n## High treason's elements as a flowchart\n\nThese elements can also be represented in a decision tree as follows:\n\n\n```{mermaid}\nflowchart TD\n    A[Did the defendant commit high treason?] --> B1{The act took place in Canada}\n    B1 -->|No| B2(Not guilty)\n    B1 -->|Yes| C{Who is the complainant}\n    C --> D[The sovereign]\n    C --> E[Canada]\n    C --> F[\"¬(The sovereign ∨ Canada)\"]\n    F --> G(Not guilty)\n    E --> H0{Did the defendant}\n    H0 --> H1[Levy war against Canada]\n    H1 -->|\"∨\"| H2[Prepare to levy war against Canada]\n    H2 -->|\"∨\"| H3[Assist an enemy at war with Canada]\n    H3 -->|\"∨\"| H4[Assist a hostile armed force engaged with Canada]\n    H4 -->|Yes| I1(Guilty)\n    H4 -->|No| I2(Not guilty)\n    D --> J0{Did the defendant}\n    J0 --> J1[Kill the sovereign]\n    J1 -->|\"∨\"| J2[Attempt to kill the sovereign]\n    J2 -->|\"∨\"| J3[Do bodily harm to the sovereign tending to cause death]\n    J3 -->|\"∨\"| J4[Do bodily harm to the sovereign tending to cause destruction]\n    J4 -->|\"∨\"| J5[Maim the sovereign]\n    J5 -->|\"∨\"| J6[Wound the sovereign]\n    J6 -->|\"∨\"| J7[Imprison the sovereign]\n    J7 -->|\"∨\"| J8[Restrain the sovereign]\n    J8 -->|Yes| K1(Guilty)\n    J8 -->|No| K2(Not guilty)\n```\n\n_Figure 1_: An ugly flowchart describing the basic expert system's flow control\n\nViewed this way, it is apparent how this decision tree might be easily adapted into a Python script that can, at a high level with sufficient and reliable information, decide whether a defendant committed high treason.\n\n# A minimally-viable high treason expert system\n\n## rules_constants.py\n\nCriminal offences occur when specific factual scenarios take place. This set of rules gives the user a rudimentary way of telling the program what facts exist, allowing it to record these facts when pertinent and return an opinion based on its analysis. \n\nCurrently, the program accomplishes this by first determining whether the victim falls into one of two classes covered by high treason. If so, the program asks several specific questions to determine whether there are enough additional facts to constitute the offence. If so, it records and returns the result. But if the complainant is not a member of the high treason complainant class or the defendant's actions do not match the _actus reus_ of any high treason variant, the function advises as much. \n\nI will outline this functionality below, but for now, the HIGH_TREASON_RULES constant contains all the information needed to get a minimally-viable high treason system going. It currently includes the complainant class as its key and a list of tuples as the key's value. The tuples have a string at index 0 that prompts the user for a yes/no question and a list at index 1 containing factual information for a future function to read and relay.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nHIGH_TREASON_RULES = {\n    \"sovereign\": [(\"Did the defendant kill the sovereign?\",\n                   [\"kill\"]),\n                  (\"Did the defendant attempt to kill the sovereign?\",\n                   [\"kill\", \"attempt\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause death?\",\n                   [\"bodily harm,\" \"tending to death\"]),\n                  (\"Did the defendant do bodily harm to the sovereign tending to cause destruction?\",\n                   [\"bodily harm,\" \"tending to destruction\"]),\n                  (\"Did the defendant maim the sovereign?\",\n                   [\"maim\"]),\n                  (\"Did the defendant wound the sovereign?\",\n                   [\"wound\"]),\n                  (\"Did the defendant imprison the sovereign?\",\n                   [\"imprison\"]),\n                  (\"Did the defendant restrain the sovereign?\",\n                   [\"restrain\"])],\n    \"canada\": [(\"Did the defendant levy war against Canada?\",\n                [\"levy war\"]),\n               (\"Did the defendant prepare to levy war against Canada?\",\n                [\"prepare\", \"levy war\"]),\n               (\"Did the defendant assist an enemy at war with Canada?\",\n                [\"assist warring enemy\"]),\n               (\"Did the defendant assist an armed force hostily engaged with Canadian Forces?\",\n                [\"assist hostile force\"])]}\n```\n:::\n\n\n## facts.py\n\nThis function generates a factual matrix that future processes will use to determine whether the case facts make out a particular offence.\n\nAt first, having the get_actions() functions return True/False rather than a list seems best. After all, if any one condition obtains, the defendant committed high treason. But this overlooks that a defendant may have committed the same offence through different means. A person who levies war against Canada AND assists a separate armed force hostile engaged with Canadian Forces commits high treason twice. Similarly, a person may have caused the sovereign bodily harm that amounts to both maiming and bodily harm tending to cause death and can be legally charged and tried for both offences (albeit not convicted of both, per *Stinchcombe*.) A list allows the program to record multiple offence instances using fewer passes. Lists save time and ensure the program remains extensible.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef get_sovereign_actions():\n    actions = []\n    for question in HIGH_TREASON_RULES[\"sovereign\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"sovereign\", question[1]))\n    return actions\n\ndef get_canada_actions():\n    actions = []\n    for question in HIGH_TREASON_RULES[\"Canada\"]:\n        response = input(question[0] + \" (yes/no): \")\n        if response.lower() == 'yes':\n            actions.append((\"Canada\", question[1]))\n    return actions\n\ndef high_treason_facts(victim_name):\n    actions = []\n\n    if victim_name.lower() == 'sovereign':\n        actions = get_sovereign_actions()\n    elif victim_name.lower() == 'canada':\n        actions = get_canada_actions()\n    return actions\n```\n:::\n\n\n## models.py\n\nOnce the program gathers this information, it needs a place to store it. The Facts class takes this job on. The version below contemplates a few variables that still need to be used. Because the program currently uses this class for just one offence, it only needs to be able to store the victim category and the defendant's actions.\n\nThe Facts class is a simple class capable of handling the minimum facts required for a high treason offence. It currently contains the following attributes:\n\n* victim_category (str): The name of the victim of the offence.\n* offence_date (str): The date of the offence.\n* jurisdiction (str): The jurisdiction where the offence occurred.\n* actions (list): A list of actions that the defendant took against the victim.\n* role (list): A list of roles that the defendant played in the offence.\n\nA Facts object should account for one offence and offender. A distinct Facts object should represent any potential path to a conviction. Multiple Facts objects should represent multiple offences or offenders.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nclass Facts:\n    def __init__(self, \n                 victim_category: str, \n                 offence_date: str, \n                 jurisdiction: str, \n                 actions: list = None, \n                 role: list = None\n                ):\n        self.victim_category = victim_category\n        self.offence_date = offence_date\n        self.jurisdiction = jurisdiction\n        self.actions = actions if actions is not None else []\n        self.role = role if role is not None else []\n```\n:::\n\n\n## rules.py\n\nOnce the factual matrix is put together, the program calls a rules function on those facts. This function first checks to see if the ```complainant_key``` matches either of the complainant categories in HIGH_TREASON_RULES. If so, the program checks to see if any of the facts attached to that key match the offence facts in HIGH_TREASON_RULES. If so, the function appends them to a list and returns it. If not, the function returns an empty list for the main function to interpret as a null result.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef high_treason_rules(facts):\n    matches = []  # create an empty list to hold matches\n    for action in facts.actions:\n        complainant_key = action[0] \n        action_value = action[1]\n\n        if complainant_key in HIGH_TREASON_RULES:\n            tuple_list = HIGH_TREASON_RULES[complainant_key]\n            for item in tuple_list:\n                if action_value == item[1]:\n                    matches.append(item)  # append the matching item to the list\n    return matches  # return the list of matches\n```\n:::\n\n\n## input_correction.py\n\nThese assumptions assume imperfect input for the victim category and try to anticipate some synonymous terms.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef standardize_sovereign_names(name):\n    known_aliases = ('queen', 'king', 'queen elizabeth', 'king charles')\n    if name.lower() in known_aliases:\n        return 'sovereign'\n    else:\n        return name\n\ndef standardize_canada_names(name):\n    known_aliases = ('nation of canada', 'canadian people', 'canadian military')\n    if name.lower() in known_aliases:\n        return 'canada'\n    else:\n        return name\n```\n:::\n\n\n## main.py\n\nThe program's main function. It creates a Facts object and checks the factual matrix against the high treason rules system.\n\n\ndef create_facts():\n    print(\"Please enter the facts of the case:\")\n\n    victim_category = input(\"Who is the victim? \")\n    victim_category = standardize_sovereign_names(victim_category)\n    victim_category = standardize_canada_names(victim_category)\n    complainant = Complainant(victim_category)\n\n    offence_date = input(\"Date of the offence (YYYY-MM-DD): \")\n    jurisdiction = input(\"Jurisdiction: \")\n\n    actions = high_treason_facts(victim_category)\n\n    return Facts(complainant.name, offence_date, jurisdiction, actions)\n\nfacts = create_facts()\nmatches = high_treason_rules(facts)\n\nif matches:\n    print(\"High treason committed. Matches:\")\n    for match in matches:\n        print(match)\nelse:\n    print(\"No offence detected.\")\n\nAnd that's it! We have the beginnings of a primitive expert legal system. I will continue developing this code in subsequent blog posts, though I may occasionally return here to update the code. Refer to the GitHub repo for version history, as needed.\n\n# AI disclaimer\n\nI've used the following AI tools to help create this project:\n\n* **Spelling and grammar.** Grammarly (non-generative)\n* **Text summarization.** ChatGPT-3.5 & 4\n* **Code.** ChatGPT-3.5 & 4, GitHub Copilot (GPT-3.5 based)\n* **Legal research.** CanLII (non-generative)\n* **Images.** DALL-E\n\n# Updates\n\n* 2023-06-25: Finished adding code and ensured the program was minimally operable\n\n\n[^bna_paper]: See <http://www.doc.ic.ac.uk/~rak/papers/British%20Nationality%20Act.pdf>\n[^bna_paper_reaction]: See e.g. [AI & Law: British Nationality Act Unexpectedly Spurred AI And Law](https://lance-eliot.medium.com/ai-law-british-nationality-act-unexpectedly-spurred-ai-and-law-404aea03386a), [How the British Nationality Act Served to Inadvertently Spur AI and the Law](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3975784).\n[^treason_high_treason_comparisons]: Compare _Criminal Code, 1952_ s 46(1) with Aidan R. Vining, \"Reforming Canadian Sentencing Practices: Problems, Prospects and Lessons\" (1979) 17:2 Osgoode Hall L J 355 at note 116.\n[^other_capital_offences]: The other historically capital offences were murder and rape.\n[^offence_elements]: See e.g. <https://en.wikibooks.org/wiki/Canadian_Criminal_Law/Proof_of_Elements>\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}